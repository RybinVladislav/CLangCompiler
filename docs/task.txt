
                  ПОДМНОЖЕСТВО 
              ВЕЛИКОГО И МОГУЧЕГО
    "Я НЕ ГОВОРЮ, ЧТО ОН ЛУЧШИЙ" (C)ФЕРТИКОВ
                    ЯЗЫКА СИ

ОТ "ОПЫТНЫХ РАЗРАБОТЧИКОВ НА ЯЗЫКЕ СИ" (С)ФЕРТИКОВ

================================================
      		     TODO
================================================

1 аттестация
* Разработана ANTLR грамматика языка.
* Синтаксический анализатор, полученный на основе грамматики, строит AST-дерево (и распечатывает в виде дерева).
* Диагностика синтаксических ошибок (по возможности).

2 аттестация
* Реализован семантический анализ входной программы.
* Диагностика семантических ошибок.
* Модификация AST-дерева в рамках типозависимого анализа.
* Генерация исполняемого кода под конкретную платформу.

3 аттестация
* Реализация примитивных оптимизаций в компиляторе
* Общая доработка компилятора
* Краткая документация

================================================
      		  ТИПЫ ДАННЫХ
================================================

int
char
string
double
[]

void

================================================
		     БЛОК
================================================
{   }

================================================
    		   ОПЕРАТОРЫ
================================================
   
    АРИФМЕТИЧЕСКИЕ

=
+
- 
* 
/ 
%
++
--

    СРАВНЕНИЯ

==
!=
>
<
>=
<=

    ЛОГИЧЕСКИЕ

!
&&
||

    СОСТАВНОЕ ПРИСВАИВАНИЕ

+=
-=
*=
/=
%=

    ПРИОРИТЕТЫ ОПЕРАЦИЙ

() [] .
! +(унарный) -(унарный) ++ --
* / %
+ -
< <= >= >
== !=
&&
||
= *= /= %= += -=

================================================
		УСЛОВНЫЙ ОПЕРАТОР
================================================

if (условие) {   } else {   }

================================================
     		      ЦИКЛЫ
================================================

for (выражение; условие; выражение) {   }
while (условие) {    }
do {    } while (условие);

================================================
       		    ВВОД/ВЫВОД
================================================

printf(форматная_строка, список_аргументов);
scanf(форматная_строка, список_аргументов);

    ФОРМАТ СПЕЦИФИКАЦИИ ПРЕОБРАЗОВАНИЯ

%[флаги][ширина][.точность][размер]тип

    ФЛАГИ

-         выводимое значение выравнивается по левому краю в пределах минимальной ширины поля
+         всегда указывать знак (плюс или минус) для выводимого десятичного числового значения
(пробел)  помещать перед результатом пробел, если первый символ значения не знак
#         «альтернативная форма» вывода значения
0         дополнять поле до ширины, указанной в поле ширина управляющей последовательности, символом 0

    СПЕЦИФИКАТОР ШИРИНЫ

Определяет минимальную длину представления видимого значения.
Если представление величины менее указанного числа, то оно будет дополнено (по умолчанию) пробелами слева, поведение может меняться предшествующими флагами.

    СПЕЦИФИКАТОР ТОЧНОСТИ

* указывает на минимальное количество символов, которое должно появиться при обработке типов d, i, o, u, x, X;
* указывает на минимальное количество символов, которое должно появиться после точки при обработке типов a, A, e, E, f, F;
* максимальное количество значащих символов для типов g и G;
* максимальное число символов, которые будут выведены для типа s

    СПЕЦИФИКАТОР РАЗМЕРА

(в нашем случае из-за выбранных типов по сути не нужен)

    СПЕЦИФИКАТОРЫ ТИПА

d         для целых чисел
f         вещественные числа с фиксированной точкой
e         вещественные числа с плавающей точкой (мантисса, порядок)
g         вещественные числа в наиболее компактной записи (из f и e)
с         символ
s         строка с нулевым завершающим байтом
%         знак процента (%%)

(см. https://ru.wikipedia.org/wiki/Printf)

================================================
       		ВСТРОЕННЫЕ ФУНКЦИИ
================================================  

break;
continue;
return

sin
cos
tan

abs

strlen

================================================
       	        ОБЪЯВЛЕНИЕ МЕТОДОВ
================================================

тип_результата имя_метода (спецификация_параметров)
{
   операторы;
   [return выражение;]
}

    ПАРАМЕТР

тип имя_параметра

================================================
       	         ВЫЗОВ МЕТОДОВ
================================================

имя_метода(список_аргументов)
